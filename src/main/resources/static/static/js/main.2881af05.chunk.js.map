{"version":3,"sources":["common/LoggingDialogs.jsx","common/Search.jsx","common/NewBlogPost.jsx","common/CardsTest.jsx","BlogPosts.js","App.js","serviceWorker.js","index.js"],"names":["LoggingDialogs","state","visible","show","_this","setState","hide","this","actions","push","react_default","a","createElement","es","flat","secondary","swapTheming","onClick","primary","id","onHide","title","placeholder","label","type","PureComponent","Search","titles","props","data","map","item","className","lineDirection","resize","min","max","leftIcon","filter","Autocomplete","caseInsensitiveFilter","onAutocomplete","onChange","NewBlogPost","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","newPost","obj","titleField","current","value","author","authorField","content","contentField","time","Date","getTime","fetch","link","href","method","headers","Content-Type","body","JSON","stringify","then","response","json","console","log","window","location","reload","React","createRef","floating","width","required","ref","rows","CardsTest","like","disable","doActionByRel","likes","postDate","date","getHours","getMinutes","getDay","getMonth","getFullYear","getComments","isLoading","comments","postComment","text","textField","dummyArg","editPost","deleteBlog","jsonResp","expanded","expandable","style","textAlign","length","makeComment","key","minWidth","maxWidth","marginBottom","onExpanderClick","subtitle","expander","margin","paddingLeft","paddingRight","icon","menuItems","primaryText","centered","showComments","defaultValue","rel","optionalBody","links","find","Error","BlogPosts","CardsTest_CardsTest","likeAction","onLikeActionBuilder","dislikeAction","onDislikeActionBuilder","singlePost","blogPostItem","dislikeLinkObject","linkObject","mode","likeLinkObject","App","result","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","posts","Symbol","iterator","next","done","post","err","return","createPostLink","_this2","resourceJson","themed","children","Search_Search","LoggingDialogs_LoggingDialogs","NewBlogPost_NewBlogPost","BlogPosts_BlogPosts","Component","Boolean","hostname","match","WebFontLoader","load","google","families","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2881af05.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { Button, DialogContainer, TextField } from 'react-md';\r\n\r\nexport default class LoggingDialogs extends PureComponent {\r\n  state = { visible: false };\r\n\r\n  show = () => {\r\n    this.setState({ visible: true });\r\n  };\r\n\r\n  hide = () => {\r\n    this.setState({ visible: false });\r\n  };\r\n\r\n  render() {\r\n    const { visible } = this.state;\r\n\r\n    const actions = [];\r\n    actions.push(<Button flat secondary swapTheming onClick={this.hide}>Cancel</Button>);\r\n    actions.push(<Button flat primary swapTheming onClick={this.hide}>Confirm</Button>);\r\n\r\n    return (\r\n      <div>\r\n        <Button flat secondary swapTheming onClick={this.show}>Sign In</Button>\r\n        <DialogContainer\r\n            id=\"simple-action-dialog\"\r\n            visible={visible}\r\n            onHide={this.hide}\r\n            actions={actions}\r\n            title=\"Sign In\"\r\n        >\r\n          <TextField\r\n              id=\"Username\"\r\n              placeholder=\"Username\"\r\n          />\r\n          <TextField\r\n              id=\"password\"\r\n              label=\"Enter your password\"\r\n              type=\"password\"\r\n          />\r\n        </DialogContainer>\r\n      </div>\r\n    );\r\n  }\r\n}","import {Autocomplete, FontIcon} from \"react-md\";\nimport React, {PureComponent} from \"react\";\n\nexport default class Search extends PureComponent {\n    render() {\n        let titles = this.props.data.map(item => (\n            item.title\n        ))\n\n        return (\n            <div  className=\"md-grid\">\n                <Autocomplete\n                    id=\"floating-center-title\"\n                    lineDirection=\"center\"\n                    placeholder={\"Search\"}\n                    resize={{min: 640, max: 1000}}\n                    leftIcon={<FontIcon>search</FontIcon>}\n                    className=\"md-cell md-cell--bottom \"\n                    data={titles}\n                    filter={Autocomplete.caseInsensitiveFilter}\n                    onAutocomplete={this.props.onAutocomplete}\n                    onChange={this.props.onChange}\n                />\n            </div>\n        );\n    }\n}","import {Button, DialogContainer, TextField} from \"react-md\";\r\nimport React, {PureComponent} from \"react\";\r\n\r\nexport default class NewBlogPost extends PureComponent {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.titleField = React.createRef();\r\n        this.authorField = React.createRef();\r\n        this.contentField = React.createRef();\r\n    }\r\n\r\n    state = {visible: false,};\r\n\r\n    show = () => {\r\n        this.setState({ visible: true });\r\n    };\r\n\r\n    hide = () => {\r\n        this.setState({visible: false,});\r\n    };\r\n\r\n    newPost = () => {\r\n        this.hide();\r\n        let obj = {\r\n            \"title\": this.titleField.current.value,\r\n            \"author\": this.authorField.current.value,\r\n            \"content\": this.contentField.current.value,\r\n            \"time\": new Date().getTime()\r\n        }\r\n\r\n        fetch(this.props.link.href, {\r\n            method: this.props.link.type,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body:JSON.stringify(obj)\r\n        }).then(response => response.json()).then(json => console.log(json));\r\n        window.location.reload();\r\n        //TODO: live update\r\n    }\r\n\r\n    render() {\r\n        const { visible } = this.state;\r\n\r\n        const actions = [];\r\n        actions.push(<Button flat primary swapTheming onClick={this.hide}>Cancel</Button>);\r\n        actions.push(<Button flat secondary swapTheming onClick={this.newPost}>Send</Button>);\r\n\r\n        return (\r\n            <div>\r\n                <Button floating secondary onClick={this.show}>add</Button>\r\n                <DialogContainer\r\n                    id=\"new-blog-post\"\r\n                    visible={visible}\r\n                    onHide={this.hide}\r\n                    actions={actions}\r\n                    title=\"New Blog Post\"\r\n                    width={500}\r\n                >\r\n                    <TextField\r\n                        id=\"title\"\r\n                        label={\"Title of the post:\"}\r\n                        required={true}\r\n                        ref={this.titleField}\r\n                    />\r\n                    <TextField\r\n                        id=\"author\"\r\n                        label={\"Authors name:\"}\r\n                        required={true}\r\n                        ref={this.authorField}\r\n                    />\r\n                    <TextField\r\n                        id=\"content\"\r\n                        label=\"Content:\"\r\n                        rows={5}\r\n                        required={true}\r\n                        ref={this.contentField}\r\n                    />\r\n                </DialogContainer>\r\n            </div>\r\n        );\r\n    }\r\n}","import {\n    Card,\n    CardText,\n    CardTitle,\n    CardActions,\n    Button,\n    TextField,\n    IconSeparator,\n    MenuButton,\n    ListItem, DialogContainer\n} from \"react-md\";\nimport React, {PureComponent} from \"react\";\n\nexport default class CardsTest extends PureComponent {\n\n    constructor(props) {\n        super(props);\n\n        this.textField = React.createRef();\n        this.titleField = React.createRef();\n        this.authorField = React.createRef();\n        this.contentField = React.createRef();\n\n        this.state = {\n            likes: 0,\n            disable: false,\n            expanded: false,\n            comments: [],\n            isLoading: false,\n            visible: false,\n        }\n    }\n\n    show = () => {\n        this.setState({ visible: true });\n    };\n\n    hide = () => {\n        this.setState({visible: false,});\n    };\n\n    like = () => {\n        if(this.state.disable === false) {\n            this.doActionByRel('like');\n            this.setState((state) => {\n                return {likes: state.likes + 1, disable: true}\n            });\n        } else if (this.state.likes > 0) {\n            this.doActionByRel('dislike');\n            this.setState((state) => {\n                return {likes: state.likes - 1, disable: false}\n            });\n        }\n    }\n\n    postDate = () => {\n        let date = new Date(this.props.time);\n        return (\n            date.getHours() + \":\" + date.getMinutes() + \" \" + date.getDay() + \".\" + date.getMonth() + \".\" + date.getFullYear()\n        )\n    }\n\n    getComments = () => {\n        this.setState({ isLoading: true });\n        this.doActionByRel('comments')\n            .then(data => this.setState({comments: data.content, isLoading: false}))\n    }\n\n    showComments() {\n        if(this.state.isLoading) {\n            return (\n                <CardText expandable style={{textAlign: 'left'}}>\n                    <p>Loading ...</p>\n                </CardText>\n            )\n        } else if(this.state.comments.length === 0 && this.state.isLoading === false) {\n            return (\n                <CardText expandable style={{textAlign: 'left'}}>\n                    <p>No comments</p>\n                    {this.makeComment()}\n                </CardText>\n            )\n        } else {\n            return (\n                <CardText expandable style={{textAlign: 'left'}}>\n                    {this.state.comments.map((item) => <p key={item.id}>{item.text}</p>)}\n                    {this.makeComment()}\n                </CardText>\n            )\n        }\n    }\n\n    makeComment() {\n        return(\n            <div>\n                <TextField id={'comment-field'} placeholder={\"New comment:\"} ref={this.textField}/>\n                <IconSeparator label={''}>\n                    <Button flat secondary swapTheming onClick={this.postComment}>Comment</Button>\n                </IconSeparator>\n            </div>\n        )\n    }\n\n    postComment = () => {\n        let obj = {\n            \"text\": this.textField.current.value,\n        };\n        this.doActionByRel('addComment', obj)\n            .then(dummyArg => window.location.reload());\n        //TODO: live update\n    }\n\n    editPost = () => {\n        let obj = {\n            \"id\": this.props.id,\n            \"title\": this.titleField.current.value,\n            \"author\": this.authorField.current.value,\n            \"content\": this.contentField.current.value,\n            \"time\": new Date().getTime()\n        };\n        this.doActionByRel('edit', obj)\n            .then(dummyArg => window.location.reload());\n        //TODO: live edit\n    }\n\n    deleteBlog = () => {\n        this.doActionByRel('delete')\n            .then(jsonResp => {\n                console.log(jsonResp);\n                window.location.reload();\n            });\n        //TODO: live delete\n    }\n\n    render() {\n        const style = { minWidth: 500, maxWidth: 640, marginBottom: 20};\n\n        const actions = [];\n        actions.push(<Button flat primary swapTheming onClick={this.hide}>Cancel</Button>);\n        actions.push(<Button flat secondary swapTheming onClick={this.editPost}>Edit</Button>);\n\n        return (\n            <div>\n                <Card style={style} className=\"md-block-centered\" onExpanderClick={this.getComments}>\n                    <CardTitle style={{textAlign: 'left'}} title={this.props.title} subtitle={\"By: \" + this.props.author + \" - \" + this.postDate()}/>\n                    <CardText style={{textAlign: 'left'}}>\n                        <p>{this.props.content}</p>\n                    </CardText>\n                    <CardActions expander>\n                        <p style={{margin: '0px', paddingLeft: '8px', paddingRight: '8px'}}>{this.props.likes + this.state.likes}</p>\n                        <Button icon secondary={this.state.disable} swapTheming onClick={this.like}>favorite</Button>\n                        <MenuButton\n                            id={this.props.id + 'Menu'}\n                            icon\n                            swapTheming\n                            menuItems={[\n                                <ListItem key={1} primaryText=\"Modify\" onClick={this.show}/>,\n                                <ListItem key={2} primaryText=\"Delete\" onClick={this.deleteBlog}/>,\n                            ]}\n                            centered\n                        >\n                            more_vert\n                        </MenuButton>\n                    </CardActions>\n                    {this.showComments()}\n                </Card>\n                <DialogContainer\n                    id=\"new-blog-post\"\n                    visible={this.state.visible}\n                    onHide={this.hide}\n                    actions={actions}\n                    title=\"Edit Blog Post\"\n                >\n                    <TextField\n                        id=\"title\"\n                        label={\"Title of the post:\"}\n                        required={true}\n                        defaultValue={this.props.title}\n                        ref={this.titleField}\n                    />\n                    <TextField\n                        id=\"author\"\n                        label={\"Authors name:\"}\n                        required={true}\n                        defaultValue={this.props.author}\n                        ref={this.authorField}\n                    />\n                    <TextField\n                        id=\"content\"\n                        label=\"Content:\"\n                        rows={5}\n                        required={true}\n                        defaultValue={this.props.content}\n                        ref={this.contentField}\n                    />\n                </DialogContainer>\n            </div>\n        )\n    }\n\n    async doActionByRel(rel, optionalBody) {\n        let link = this.props.links.find((link) => link.rel === rel);\n\n        if (typeof link === 'undefined') {\n            throw new Error('Invalid argument provided: rel');\n        }\n\n        if (typeof optionalBody === 'undefined') {\n            const response = await fetch(link.href, {\n                method: link.type});\n            console.log(response);\n            let json;\n            try {\n                json = await response.json();\n            } catch (e) {\n                json = {};\n            }\n\n            return json;\n        } else {\n            const response = await fetch(link.href, {\n                method: link.type,\n                headers: {\"Content-Type\": \"application/json\"},\n                body:JSON.stringify(optionalBody)\n            });\n            return await response.json();\n        }\n    }\n}","import React, { PureComponent } from \"react\";\n\nimport CardsTest from './common/CardsTest'\n\nexport default class BlogPosts extends PureComponent {\n\n    render() {\n        if(this.props.data) {\n            return (\n                this.props.data.map((item) =>\n                    <div key={item.id}>\n                        <CardsTest\n                            id={item.id}\n                            title={item.title}\n                            author={item.author}\n                            content={item.content}\n                            time={item.time}\n                            likes={item.likes}\n                            links={item.links}\n                            likeAction={this.onLikeActionBuilder(item)}\n                            dislikeAction={this.onDislikeActionBuilder(item)}\n                        />\n                    </div>\n                )\n            );\n        } else if (this.props.singlePost){\n            return (\n                <div key={this.props.singlePost.id}>\n                    <CardsTest\n                        id={this.props.singlePost.id}\n                        title={this.props.singlePost.title}\n                        author={this.props.singlePost.author}\n                        content={this.props.singlePost.content}\n                        time={this.props.singlePost.time}\n                        likes={this.props.singlePost.likes}\n                        likeAction={this.onLikeActionBuilder(this.props.singlePost)}\n                        dislikeAction={this.onDislikeActionBuilder(this.props.singlePost)}\n                    />\n                </div>\n            )\n        }\n    }\n\n    onDislikeActionBuilder(blogPostItem) {\n        let dislikeLinkObject = blogPostItem.links.find(\n            (linkObject) => linkObject.rel === 'dislike');\n        return () => {\n            fetch(dislikeLinkObject.href, {method:'post', mode:'no-cors'});\n        };\n    }\n\n    onLikeActionBuilder(blogPostItem) {\n        let likeLinkObject = blogPostItem.links.find(\n            (linkObject) => linkObject.rel === 'like');\n        return () => {\n            fetch(likeLinkObject.href, {method:'post', mode:'no-cors'});\n        };\n    }\n}","import React, { Component } from 'react';\nimport {Toolbar} from 'react-md';\nimport './App.scss';\n\nimport LoggingDialogs from \"./common/LoggingDialogs\";\nimport Search from \"./common/Search\"\nimport NewBlogPost from \"./common/NewBlogPost\"\nimport BlogPosts from \"./BlogPosts\"\nimport ApiRequestHandler from \"./ApiRequestHandler\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            posts: null,\n            visible: false,\n            post: null,\n            createPostLink: null\n        };\n    }\n\n    show = () => {\n        this.setState({ visible: true });\n    };\n\n    hide = () => {\n        this.setState({visible: false,});\n    };\n\n    componentDidMount() {\n        fetch(\"/api/posts/\", {mode:\"no-cors\", method: \"GET\"})\n            .then(response => response.json())\n            .then(resourceJson => this.setState({\n                posts: resourceJson.content,\n            }));\n        fetch(\"/api/\", {mode:\"no-cors\", method:\"GET\"})\n            .then(response => response.json())\n            .then(resourceJson => this.setState({\n                createPostLink: resourceJson.links.find(\n                    (link) => link.rel === 'createPost')\n            }));\n    }\n\n    render() {\n        if(!this.state.posts) {\n            return(\n                <div className=\"App\">\n                    <Toolbar\n                        themed\n                        title=\"Blogging site\"\n                        actions={<LoggingDialogs/>}\n                    />\n                    <div className=\"md-grid\">\n                        <NewBlogPost\n                            link={this.state.createPostLink}\n                        />\n                    </div>\n                    <p>Loading ...</p>\n                </div>\n                )\n        } else if(this.state.visible) {\n            return (\n                <div className=\"App\">\n                    <Toolbar\n                        themed\n                        title=\"Blogging site\"\n                        children={<Search data={this.state.posts} onAutocomplete={this.onAutocomplete} onChange={this.onChange}/>}\n                        actions={<LoggingDialogs/>}\n                    />\n                    <div className=\"md-grid\">\n                        <NewBlogPost\n                            link={this.state.createPostLink}\n                        />\n                    </div>\n                    <BlogPosts singlePost={this.state.post}/>\n                </div>\n                )\n        } else {\n            return (\n                <div className=\"App\">\n                    <Toolbar\n                        themed\n                        title=\"Blogging site\"\n                        children={<Search data={this.state.posts} onAutocomplete={this.onAutocomplete} onChange={this.onChange}/>}\n                        actions={<LoggingDialogs/>}\n                    />\n                    <div className=\"md-grid\">\n                        <NewBlogPost\n                            link={this.state.createPostLink}\n                        />\n                    </div>\n                    <BlogPosts data={this.state.posts}/>\n                </div>\n            );\n        }\n    }\n\n    onAutocomplete = (result) => {\n        for(let item of this.state.posts) {\n            if(item.title === result) {\n                this.setState({\n                    post: item\n                })\n            }\n        }\n        this.show()\n    }\n\n    onChange = (item) => {\n        if(item === '') {\n            this.hide()\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport WebFontLoader from 'webfontloader';\r\nWebFontLoader.load({\r\n    google: {\r\n        families: ['Roboto:300,400,500,700', 'Material Icons'],\r\n    },\r\n});\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}